// pid_t   process;

    // process = fork();
    //     printf("Original program,  pid=%d\n",  getpid());
    //     if (process == 0)
    //     {
    //         printf("In child process,  pid=%d,  ppid=%d\n",
    //             getpid(),  getppid());
    //     }
    //     else
    //     {
    //         printf("In parent,  pid=%d,  fork returned=%d\n",
    //                 getpid(),  process);
    //     }
    //     ft_printf("Hi\n");
    // if (process < 0)
    // {
    //     ft_printf("No new process\n");
    // }
    // else if (process == 0)
    // {
    //     ft_printf("\nI am child-process\n");
    //     ft_printf("My PID: %d\n", getpid());
    //     ft_printf("My parent PID: %d\n", getppid());
    // }
    // else
    // {
    //     ft_printf("\nI am parent-process\n");
    //     ft_printf("My PID: %d\n", getpid());
    //     ft_printf("My child PID=%d\n", process);
    // }

BASH: for ^D

bash-3.2$ exit
There are stopped jobs.
bash-3.2$

#define SIGHUP  1   /* Hangup the process */
#define SIGINT  2   /* Interrupt the process */
#define SIGQUIT 3   /* Quit the process */
#define SIGILL  4   /* Illegal instruction. */
#define SIGTRAP 5   /* Trace trap. */
#define SIGABRT 6   /* Abort. */

struct termios {
    tcflag_t c_iflag;      /* input modes */
    tcflag_t c_oflag;      /* output modes */
    tcflag_t c_cflag;      /* control modes */
    tcflag_t c_lflag;      /* local modes */ - (ICANON - “canonical” mode – also known as “line editing” mode), (ECHO),
                                                (ISIG - ^C and ^Z (and friends) generate signals or not)
    cc_t     c_cc[NCCS];   /* control chars */ (VINTR – Generate a SIGINT (^C by default),
                                                (VSUSP – Generate a SIGTSTP (stop the program) (^Z by default))
}

execv("./prcs1", (char *[]){ "./prcs1", argv[1], NULL });
        _exit(1);
